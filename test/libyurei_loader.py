# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libyurei_loader', [dirname(__file__)])
        except ImportError:
            import _libyurei_loader
            return _libyurei_loader
        if fp is not None:
            try:
                _mod = imp.load_module('_libyurei_loader', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libyurei_loader = swig_import_helper()
    del swig_import_helper
else:
    import _libyurei_loader
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class model_v(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model_v, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model_v, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libyurei_loader.model_v_x_set
    __swig_getmethods__["x"] = _libyurei_loader.model_v_x_get
    if _newclass:x = _swig_property(_libyurei_loader.model_v_x_get, _libyurei_loader.model_v_x_set)
    __swig_setmethods__["y"] = _libyurei_loader.model_v_y_set
    __swig_getmethods__["y"] = _libyurei_loader.model_v_y_get
    if _newclass:y = _swig_property(_libyurei_loader.model_v_y_get, _libyurei_loader.model_v_y_set)
    __swig_setmethods__["z"] = _libyurei_loader.model_v_z_set
    __swig_getmethods__["z"] = _libyurei_loader.model_v_z_get
    if _newclass:z = _swig_property(_libyurei_loader.model_v_z_get, _libyurei_loader.model_v_z_set)
    def __init__(self): 
        this = _libyurei_loader.new_model_v()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libyurei_loader.delete_model_v
    __del__ = lambda self : None;
model_v_swigregister = _libyurei_loader.model_v_swigregister
model_v_swigregister(model_v)

class model_vt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model_vt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model_vt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libyurei_loader.model_vt_x_set
    __swig_getmethods__["x"] = _libyurei_loader.model_vt_x_get
    if _newclass:x = _swig_property(_libyurei_loader.model_vt_x_get, _libyurei_loader.model_vt_x_set)
    __swig_setmethods__["y"] = _libyurei_loader.model_vt_y_set
    __swig_getmethods__["y"] = _libyurei_loader.model_vt_y_get
    if _newclass:y = _swig_property(_libyurei_loader.model_vt_y_get, _libyurei_loader.model_vt_y_set)
    __swig_setmethods__["z"] = _libyurei_loader.model_vt_z_set
    __swig_getmethods__["z"] = _libyurei_loader.model_vt_z_get
    if _newclass:z = _swig_property(_libyurei_loader.model_vt_z_get, _libyurei_loader.model_vt_z_set)
    def __init__(self): 
        this = _libyurei_loader.new_model_vt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libyurei_loader.delete_model_vt
    __del__ = lambda self : None;
model_vt_swigregister = _libyurei_loader.model_vt_swigregister
model_vt_swigregister(model_vt)

class object_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, object_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, object_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libyurei_loader.object_model_name_set
    __swig_getmethods__["name"] = _libyurei_loader.object_model_name_get
    if _newclass:name = _swig_property(_libyurei_loader.object_model_name_get, _libyurei_loader.object_model_name_set)
    __swig_setmethods__["vertex_count"] = _libyurei_loader.object_model_vertex_count_set
    __swig_getmethods__["vertex_count"] = _libyurei_loader.object_model_vertex_count_get
    if _newclass:vertex_count = _swig_property(_libyurei_loader.object_model_vertex_count_get, _libyurei_loader.object_model_vertex_count_set)
    __swig_setmethods__["textures_count"] = _libyurei_loader.object_model_textures_count_set
    __swig_getmethods__["textures_count"] = _libyurei_loader.object_model_textures_count_get
    if _newclass:textures_count = _swig_property(_libyurei_loader.object_model_textures_count_get, _libyurei_loader.object_model_textures_count_set)
    __swig_setmethods__["normals_count"] = _libyurei_loader.object_model_normals_count_set
    __swig_getmethods__["normals_count"] = _libyurei_loader.object_model_normals_count_get
    if _newclass:normals_count = _swig_property(_libyurei_loader.object_model_normals_count_get, _libyurei_loader.object_model_normals_count_set)
    __swig_setmethods__["vertex"] = _libyurei_loader.object_model_vertex_set
    __swig_getmethods__["vertex"] = _libyurei_loader.object_model_vertex_get
    if _newclass:vertex = _swig_property(_libyurei_loader.object_model_vertex_get, _libyurei_loader.object_model_vertex_set)
    __swig_setmethods__["texture"] = _libyurei_loader.object_model_texture_set
    __swig_getmethods__["texture"] = _libyurei_loader.object_model_texture_get
    if _newclass:texture = _swig_property(_libyurei_loader.object_model_texture_get, _libyurei_loader.object_model_texture_set)
    def __init__(self): 
        this = _libyurei_loader.new_object_model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libyurei_loader.delete_object_model
    __del__ = lambda self : None;
object_model_swigregister = _libyurei_loader.object_model_swigregister
object_model_swigregister(object_model)


def obj_loader_Init() -> "void" :
  return _libyurei_loader.obj_loader_Init()
obj_loader_Init = _libyurei_loader.obj_loader_Init

def obj_load_model(*args) -> "struct object_model *" :
  return _libyurei_loader.obj_load_model(*args)
obj_load_model = _libyurei_loader.obj_load_model

def obj_copy_vertex(*args) -> "void" :
  return _libyurei_loader.obj_copy_vertex(*args)
obj_copy_vertex = _libyurei_loader.obj_copy_vertex
# This file is compatible with both classic and new-style classes.


